[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction à Python",
    "section": "",
    "text": "C’est quoi Python ?\nPython est un langage de programmation largement utilisé, développé par Guido van Rossum aux Pays-Bas en 1989. Van Rossum a nommé cela en référence à la série télévisée “Monty Python’s Flying Circus”, qu’il appréciait beaucoup. Python a été publié pour la première fois en 1991.\nPython est apprécié pour plusieurs raisons :\nCompatibilité multiplateforme : Python fonctionne sur divers systèmes d’exploitation, y compris Windows, Mac OS X, Linux, Android et iOS. Il peut être utilisé sur des appareils allant des mini-ordinateurs comme le Raspberry Pi jusqu’aux superordinateurs.\nGratuité : Python est libre et gratuit, ce qui signifie que vous pouvez l’installer et l’utiliser sur autant d’appareils que vous le souhaitez, y compris sur votre téléphone.\nLangage de haut niveau : Python est conçu pour être facile à lire et à écrire, nécessitant moins de connaissances techniques sur le fonctionnement des ordinateurs que d’autres langages.\nInterprété : Les programmes Python n’ont pas besoin d’être compilés avant leur exécution. Cela les différencie de langages comme C ou C++ et facilite la tâche des développeurs.\nOrienté objet : Python permet de créer des entités qui simulent des objets du monde réel, avec leurs propres caractéristiques et interactions, rendant le code plus modulaire et réutilisable.\nFacile à apprendre : Python est réputé pour sa simplicité et sa facilité de prise en main pour les débutants.\nEn conclusion, en raison de sa polyvalence, de sa simplicité et de son large éventail d’applications, Python est un choix populaire pour les développeurs."
  },
  {
    "objectID": "cours.html",
    "href": "cours.html",
    "title": "Les fondamentaux de Python",
    "section": "",
    "text": "Bienvenue dans ce cours introductif sur Python. Ce cours couvrira les concepts de base pour vous permettre de démarrer avec Python."
  },
  {
    "objectID": "cours.html#variables",
    "href": "cours.html#variables",
    "title": "Les fondamentaux de Python",
    "section": "1.1 Variables",
    "text": "1.1 Variables\nLes variables sont essentielles en programmation. Elles servent de conteneurs pour stocker des données, comme des nombres ou des textes. En Python, créer une variable est simple :\nx = 10\nIci, x est une variable contenant la valeur 10. Python est un langage à typage dynamique, ce qui signifie que vous n’avez pas besoin de déclarer le type de la variable explicitement.\nIci, x est une variable contenant la valeur 10. Python est un langage à typage dynamique, ce qui signifie que vous n’avez pas besoin de déclarer le type de la variable explicitement.\nAffectation : L’opérateur = est utilisé pour assigner une valeur à une variable.\nTypage dynamique : Python détermine le type de la variable lors de son exécution.\nRéaffectation : Les valeurs des variables peuvent être modifiées.\nSensibilité à la casse : a et A sont considérées comme deux variables distinctes.\nAstuce : Utilisez print(variable1, variable2) pour afficher plusieurs variables.\nConventions de Nommage\nLes conventions courantes incluent :\ncamelCase : maVariable PascalCase : MaVariable snake_case : ma_variable Évitez les noms de variables commençant par des chiffres, ou contenant des espaces ou des symboles spéciaux."
  },
  {
    "objectID": "cours.html#types-de-données",
    "href": "cours.html#types-de-données",
    "title": "Les fondamentaux de Python",
    "section": "1.2 Types de données",
    "text": "1.2 Types de données\nPython offre une variété de types de données :\nEntiers (int) : Nombres sans décimales (5, -3).\nFlottants (float) : Nombres avec décimales (3.14).\nChaînes de caractères (str) : Textes (“Bonjour”).\nBooléens (bool) : Valeurs True ou False."
  },
  {
    "objectID": "cours.html#convertir-des-types-pour-la-programmation",
    "href": "cours.html#convertir-des-types-pour-la-programmation",
    "title": "Les fondamentaux de Python",
    "section": "2.1 Convertir des types pour la programmation",
    "text": "2.1 Convertir des types pour la programmation\nLe processus de conversion de type, également appelé “casting”, permet de changer une valeur d’un type de données à un autre.\nLes fonctions intégrées de Python incluent les entiers (int), les chaînes de caractères (str), les booléens (bool) et les nombres à virgule flottante (float).\nObservons quelques exemples de conversion entre ces catégories :\n\nConversion d’une valeur en entier (int)\n# Depuis une chaîne de caractères** :\nchaine = \"789\"\nnombre = int(chaine)  # Convertit la chaîne \"789\" en entier 789\n\n## Depuis un booléen** :\nvrai = True\nentier = int(vrai)  # Convertit True en 1\n\n## Depuis un float** :\nflottant = 7.36\nentier = int(flottant)  # Convertit 7.36 en 7 (troncature, pas d'arrondi)\n\n\nConversion d’une valeur en Chaîne de Caractères (str)\n## Depuis un entier ou un float** :\nnombre = 789\nchaine = str(nombre)  # Convertit l'entier 789 en chaîne \"789\"\n\n## Depuis un booléen** :\nvrai = True\nchaine = str(vrai)  # Convertit True en \"True\"\n\n\nConversion d’une valeur en Booléen (bool)\n## Depuis une chaîne de caractères** :\nchaine = \"\"\nbooleen = bool(chaine)  # Convertit une chaîne vide en False\nchaine2 = \"Python\"\nbooleen2 = bool(chaine2)  # Convertit \"Python\" en True\n\n## Depuis un nombre** : \nnombre = 0\nbooleen = bool(nombre)  # Convertit 0 en False\nnombre2 = 123\nbooleen2 = bool(nombre2)  # Convertit 123 en True\n\n\nConversion d’une valeur en Float (float)\n## Depuis une chaîne de caractères** :\nchaine = \"673.85\"\nflottant = float(chaine)  # Convertit la chaîne \"673.85\" en float 673.85\n\n## Depuis un entier** :\nentier = 500\nflottant = float(entier)  # Convertit l'entier 500 en float 500.0\n\n## Depuis un booléen** :\nvrai = True\nflottant = float(vrai)  # Convertit True en 1.0\n\n\nAffectation de valeurs différentes\nx, y, z = \"Chocolat\", \"Spéculos\", \"Café\"\nprint(x)\nprint(y)\nprint(z)\nAffectation de la même valeur\nx = y = z = \"Café\"\nprint(x)\nprint(y)\nprint(z)"
  },
  {
    "objectID": "cours.html#opérations",
    "href": "cours.html#opérations",
    "title": "Les fondamentaux de Python",
    "section": "2.2 Opérations",
    "text": "2.2 Opérations\n\nOpérations arithmétiques\nArithmétique : Addition (+), soustraction (-), multiplication (*), et division (/).\nsomme = 20 + 15      # Résultat: 35\ndifference = 20 - 5  # Résultat: 15\nproduit = 20 * 5     # Résultat: 100\nquotient = 40 / 5    # Résultat: 8.0\nModulo (%) retourne le reste de la division Puissance (**) élève un nombre à une certaine puissance.\nreste = 10 % 3       # Résultat: 1\npuissance = 2 ** 3   # Résultat: 8\n\n\nOpérations sur les chaînes\nLa concaténation (+) combine des chaînes\nLa répétition (*) répète une chaîne un certain nombre de fois.\nmessage = \"Salut\" + \"bande de nazes\"  # Résultat: \"Salut bande de nazes\"\necho = \"Ho\" * 3                    # Résultat: \"HoHoHo\"\n\n\nOpérateurs d’affectation composés\nLes raccourcis appelés opérateurs d’affectation composés combinent une affectation et une opération arithmétique ou binaire.\nEn somme, ils vous permettent d’effectuer une opération sur une variable et de réaffecter le résultat en une seule étape.\n# Initialisation de x\nx = 5\nprint(x)\n\n# Ajouter et assigner\nx += 2  # x est maintenant 7\nprint(x)\n\n# Soustraire et assigner\nx -= 3  # x est maintenant 4\nprint(x)\n\n# Multiplier et assigner\nx *= 4  # x est maintenant 16\nprint(x)\n\n# Diviser et assigner\nx /= 2  # x est maintenant 8\nprint(x)\n\n# Division entière et assigner\nx //= 3  # x est maintenant 2\nprint(x)\n\n# Modulo et assigner\nx %= 3  # x est maintenant 2\nprint(x)\n\n# Exponentielle et assigner\nx **= 2  # x est maintenant 4\nprint(x)"
  },
  {
    "objectID": "cours.html#commentaires",
    "href": "cours.html#commentaires",
    "title": "Les fondamentaux de Python",
    "section": "3.1 Commentaires",
    "text": "3.1 Commentaires\nLe code est expliqué à l’aide de commentaires.\nIls sont extrêmement utiles pour ceux qui lisent votre code, ainsi que pour vous-même. Les commentaires commencent par un # et se poursuivent jusqu’à la fin de la ligne.\nLors de l’exécution du code, les commentaires sont ignorés.\n# Ceci est un commentaire \n\nz = 69  # Ceci est un commentaire suivant une instruction\n\n# Vous pouvez utiliser les commentaires pour expliquer\n# ce que votre code est censé faire :\nz = x + 9  # Ajout de 9 à x et stockage du résultat dans z"
  },
  {
    "objectID": "cours.html#affichage",
    "href": "cours.html#affichage",
    "title": "Les fondamentaux de Python",
    "section": "3.2 Affichage",
    "text": "3.2 Affichage\nLa fonction print() est utilisée pour l’affichage.\nElle permet d’afficher sur la console le texte, les nombres et d’autres objets.\nprint(\"Salut, ça va ?\")  # Affiche un message simple\n\nnombre = 69\nprint(nombre)  # Affiche la valeur de la variable 'nombre'\n\n# Vous pouvez aussi combiner du texte et des variables :\nprint(\"Le nombre est\", nombre)  # Affiche \"Le nombre est 69\"\n\nUtilisation de f-string\nprenom = 'Maroua'\nage = 30\ntaille = 155\n\n# Formatage de chaînes avec f-string pour une lisibilité améliorée :\nprint(f\"Le nombre est {nombre}\") \nprint(f\"{prenom}, est partie\")\n\n\nf-string avec Plusieurs Variables\nprint(f\"{prenom} mesure {taille} metres et a {age} ans\")\n\n\nUtilisation de format\nprint(\"{} a {} ans \".format(prenom, age))\n\nLes variables sont insérées dans la chaîne de caractères à l’aide de la méthode.format(). Les espaces réservés appelés “{}” seront remplacés par les arguments de la fonction “.format()” dans l’ordre. Le premier “{}” contient l’insertion de “ma_chaine” et de “age”, respectivement.\n\nCalculer et mesurer\nLa valeur de “prop” est affichée dans le premier “print(prop)”, avec tous ses chiffres après la virgule. - La seconde fonction “print()” utilise une string f avec un format spécifique appelé “{prop:.2f}”.\nEn conséquence, la valeur “prop” affichera seulement deux chiffres après la virgule.\nprop = (4500 + 2575) / 14800\nprint(prop)\nprint(f\"La proportion de GC est {prop:.2f}\")"
  },
  {
    "objectID": "cours.html#les-opérateurs",
    "href": "cours.html#les-opérateurs",
    "title": "Les fondamentaux de Python",
    "section": "4.1 Les opérateurs",
    "text": "4.1 Les opérateurs\nLes opérateurs Python sont utilisés pour effectuer des opérations sur les variables et les valeurs.\nLes opérateurs de comparaison incluent égal à, différent de, supérieur à, inférieur à, supérieur ou égal à, et inférieur ou égal à.\n\n\n\nOpérateur comparaison\nDescription\n\n\n\n\nEgalité\n==\n\n\nDifférent de\n!=\n\n\nSupérieur\n&gt;\n\n\nInférieur\n&lt;\n\n\nSupérieur ou égale\n&gt;=\n\n\nInférieur ou égale\n&lt;=\n\n\n\n\nRenvoient soit Vrai, soit Faux, en fonction du résultat de la comparaison.\n\nLes opérateurs logiques et, ou et non sont souvent combinés avec les opérateurs de comparaison.\n\n\n\nOpérateur logique\nDescription\nRésultat\n\n\n\n\nAnd\nand\nTrue si les deux propositions sont vraies\n\n\nOr\nor\nTrue si au moins une des propositions est Vraie\n\n\nNot\nnot\ninverse de l’instruction\n\n\n\nLes opérateurs d’appartenance in et not in sont utilisés pour vérifier si une valeur ou une chaîne de caractères se trouve à l’intérieur d’une autre valeur, chaîne de caractères ou séquence.\n\n\n\n\n\n\n\n\nOpérateur logique\nDescription\nRésultat\n\n\n\n\nIn\nin\nTrue si la valeur spécifiée est présente dans l’objet.\n\n\nNot in\nnot in\nTrue si la valeur spécifiée n’est pas présente dans l’objet.\n\n\n\n# Exemples d'opérateurs de comparaison\nprint(\"Opérateurs de comparaison:\")\nprint(5 == 5)  # Égalité, renvoie True\n\nprint(5 != 2)  # Différent de, renvoie True\nprint(5 &gt; 3)   # Supérieur à, renvoie True\nprint(5 &lt; 8)   # Inférieur à, renvoie True\nprint(5 &gt;= 3)  # Supérieur ou égal à, renvoie True\nprint(5 &lt;= 8)  # Inférieur ou égal à, renvoie True\n\n# Exemples d'opérateurs logiques\nprint(\"\\nOpérateurs logiques:\")\nprint(True and False)  # and, renvoie False\nprint(True or False)   # or, renvoie True\nprint(not True)        # not, renvoie False\n\n# Exemples d'opérateurs d'appartenance\nprint(\"\\nOpérateurs d'appartenance:\")\nliste = [1, 2, 3, 4, 5]\nprint(3 in liste)       # in, renvoie True\nprint(6 not in liste)   # not in, renvoie True"
  },
  {
    "objectID": "cours.html#conditions",
    "href": "cours.html#conditions",
    "title": "Les fondamentaux de Python",
    "section": "4.2 Conditions",
    "text": "4.2 Conditions\n# condition\nx = 100 \n\n# Première condition : vérifie si x est inférieur à 10\nif x &lt; 10:\n    print(\"x est inférieur à 10\")\n# Deuxième condition : vérifie si x est supérieur ou égal à 100\nelif x &gt;= 100:\n    print(\"x est supérieur ou égal à 100\")\n# Dernière condition : si toutes les conditions précédentes sont fausses\nelse:\n    print(\"x est supérieur à 10 mais inférieur à 100\")\n# Initialisation des variables\nx = 100 \ny = 30 \n\n# Première condition : vérifie si x est inférieur à 10 ET y est supérieur à 20\nif (x &lt; 10) and (y &gt; 20):\n    print(\"x est inférieur à 10 et y est supérieur à 20\")\n# Deuxième condition : vérifie si x est supérieur ou égal à 100 OU y est supérieur ou égal à 30\nelif x &gt;= 100 or y &gt;= 30:\n    print(\"x est supérieur ou égal à 100 ou y est supérieur ou égal à 30\")\n# Dernière condition : si toutes les conditions précédentes sont fausses\nelse:\n    print(\"x est supérieur à 10\")"
  },
  {
    "objectID": "cours.html#les-boucles",
    "href": "cours.html#les-boucles",
    "title": "Les fondamentaux de Python",
    "section": "4.3 Les boucles",
    "text": "4.3 Les boucles\n\nBoucle for\nLa boucle for peut être utilisée pour parcourir différentes structures de données, telles qu’une liste, un tuple, un tableau, une chaîne de caractères ou un dictionnaire.\nLa boucle commence par examiner le premier élément de la séquence et effectuer des actions dans son corps avant de passer à l’élément suivant jusqu’à ce que la séquence soit terminée.\nUne boucle est composée d’un mot-clé appelé “for”, d’une variable temporaire qui contient chaque élément, d’un mot-clé appelé “in” et de la séquence à parcourir, suivie de deux points. Jusqu’au bout de l’élément - Appliquer des opérations sur la variable temporaire du corps de la boucle pour effectuer diverses opérations. - Combiner des fors - La méthode “items()” permet de boucler les clés et les valeurs dans les dictionnaires.\n# Exemple de boucle for\nfor i in range(5):\n    print(i)\n\nfruits = [\"pomme\", \"banane\", \"mangue\", \"cerise\"]\nfor fruit in fruits:\n    print(fruit)\n\nprint(\"Boucle for sur une liste:\")\nma_liste = [1, 2, 3, 4, 5]\nfor element in ma_liste:\n    print(element)\n\nnombres = [1, 2, 3, 4, 5]\nfor nombre in nombres:\n    if nombre % 2 == 0:\n        print(f\"{nombre} est pair\")\n    else:\n        print(f\"{nombre} est impair\")\n\n\nBoucle while\nTant qu’une condition est vraie, la boucle while itère sur un bloc de code. Les boucles “while” continuent l’itération tant que la condition reste vraie, contrairement aux boucles “for”.\n\n“break” pour interrompre une boucle “while” prématurément, même si la condition est toujours vraie. Une boucle “while” peut utiliser “else” pour indiquer un bloc de code qui s’exécutera lorsque la condition de la boucle ne sera plus vraie. Il est possible d’ignorer le code restant dans l’itération actuelle de la boucle en cliquant sur “continue” pour passer à l’itération suivante.\nAfin d’éviter de créer des boucles infinies, utilisez “continue” avec précaution.\n\n# Boucle while avec break\nprint(\"\\nBoucle while avec break:\")\ni = 1\nwhile i &lt;= 5:\n    print(i)\n    if i == 3:\n        print(\"Break à 3\")\n        break\n    i += 1\n\n# Boucle while avec continue\nprint(\"\\nBoucle while avec continue:\")\ni = 0\nwhile i &lt; 5:\n    i += 1\n    if i == 3:\n        continue\n    print(i)\n\n# Boucle while avec else\nprint(\"\\nBoucle while avec else:\")\ni = 1\nwhile i &lt;= 5:\n    print(i)\n    i += 1\nelse:\n    print(\"La condition n'est plus vraie (i &gt; 5)\")\n\n# Exemple de boucle while True\nprint(\"Boucle while True avec un mécanisme de sortie :\")\n\ncompteur = 0\nwhile True:\n    compteur += 1\n    print(compteur)\n\n    # Interrompre la boucle si compteur atteint 5\n    if compteur == 5:\n        print(\"Compteur a atteint 5, sortir de la boucle.\")\n        break"
  },
  {
    "objectID": "cours.html#les-méthodes",
    "href": "cours.html#les-méthodes",
    "title": "Les fondamentaux de Python",
    "section": "5.1 Les méthodes",
    "text": "5.1 Les méthodes\nLes méthodes pour les chaînes de caractères sont des fonctions liées à des objets particuliers. Ils permettent d’agir sur ces objets ou de manipuler leurs données internes. Voici quelques aspects clés des méthodes :\nLes méthodes sont liées à des objets, contrairement aux fonctions indépendantes. \nLes méthodes de chaînes de caractères (\"str\"), par exemple, sont conçues pour effectuer des opérations sur des chaînes de caractères particulières.\nLa syntaxe est une technique qui utilise la notation pointée. Par exemple, utilisez \"objet.methode()\".\n- Méthodes de chaînes de caractères : les fonctions \"upper()\", \"lower()\" et \"replace()\" peuvent être utilisées pour convertir les caractères en majuscules ou minuscules ou remplacer une partie de la chaîne.\n- Appel : La syntaxe \"objet.methode(arguments)\" est généralement utilisée pour appeler une méthode.\n# Méthodes str.isupper() et str.islower()\nmajuscules = \"PYTHON\"\nminuscules = \"python\"\nis_upper = majuscules.isupper()\nis_lower = minuscules.islower()\nprint(is_upper)  # Résultat : True\nprint(is_lower)  # Résultat : True\n\n# Méthode str.upper()\ntexte_upper = \"python est génial\".upper()\nprint(texte_upper)  # Résultat : \"PYTHON EST GÉNIAL\"\n\n# Méthode str.lower()\ntexte_lower = \"Python est GÉNIAL\".lower()\nprint(texte_lower)  # Résultat : \"python est génial\"\n\n# Méthode str.capitalize()\ntexte_capitalize = \"python est génial\".capitalize()\nprint(texte_capitalize)  # Résultat : \"Python est génial\"\n\n# Méthode str.title()\ntexte_title = \"python est génial\".title()\nprint(texte_title)  # Résultat : \"Python Est Génial\"\n\n# Méthode str.find(substring)\ntexte = \"Python est génial\"\nposition = texte.find(\"est\")\nprint(position)  # Résultat : 7\n\n# Méthode str.replace(old, new)\ntexte_replace = \"Les pommes sont rouges.\".replace(\"pommes\", \"bananes\")\nprint(texte_replace)  # Résultat : \"Les bananes sont rouges.\"\n\n# Méthode str.split(separator)\ntexte_split = \"apple,orange,banana\".split(\",\")\nprint(texte_split)  # Résultat : [\"apple\", \"orange\", \"banana\"]\n\n# Méthode str.join(iterable)\nelements = [\"apple\", \"orange\", \"banana\"]\ntexte_join = \", \".join(elements)\nprint(texte_join)  # Résultat : \"apple, orange, banana\"\n\n# Méthode str.strip()\ntexte_strip = \"   Bonjour   \".strip()\nprint(texte_strip)  # Résultat : \"Bonjour\"\n\n# Méthode str.startswith(prefix)\ntexte_startswith = \"Bonjour, comment ça va ?\".startswith(\"Bonjour\")\nprint(texte_startswith)  # Résultat : True\n\n# Méthode str.endswith(suffix)\ntexte_endswith = \"Leçon terminée.\".endswith(\"terminée.\")\nprint(texte_endswith)  # Résultat : TrueS"
  },
  {
    "objectID": "cours.html#les-listes",
    "href": "cours.html#les-listes",
    "title": "Les fondamentaux de Python",
    "section": "5.2 Les listes",
    "text": "5.2 Les listes\nLes listes sont des structures de données qui peuvent contenir une série d’éléments. Elles sont flexibles, peuvent contenir divers types d’éléments et peuvent être modifiées.\nLes listes sont utilisées. - Collections de valeurs organisées qui peuvent contenir divers types de données. - Les virgules séparent les éléments et les crochets les entourent. - Modifiables. - Pour créer une liste, utilisez des virgules entre les crochets “[]” pour séparer une série d’éléments. Par exemple : « [1, “a”, 3.14] ». - Leur index commence par “0” pour accéder aux éléments. - Parce que les listes sont mutables (modifiables), vous pouvez changer leurs éléments.\n# Définition de liste\nma_liste = [1, 2, 3, \"Python\", 3.14]\nprint(ma_liste)\n\npremier_element = ma_liste[0]  # Accède au premier élément (1)\ndernier_element = ma_liste[-1] # Accède au dernier élément (3.14)\nprint(premier_element,\"\\n\", dernier_element)\n\n # Modifie le deuxième élément\nma_liste[1] = \"deux\" \nprint(ma_liste)\n\n# Concaténation et Répétition\ncombinee = ma_liste + [\"autre\", \"liste\"]\nrepetee = [1, 2, 3] * 3\n\nLes méthodes des listes\nChaque méthode offre une fonctionnalité unique pour manipuler des listes, rendant ces structures de données extrêmement flexibles et puissantes pour une variété de tâches en programmation Python.\n\n\n\n\n\n\n\n\nMéthode\nDescription\nExemple d’Utilisation\n\n\n\n\nappend()\nAjoute un élément à la fin de la liste.\nliste.append(5)\n\n\nextend()\nÉtend la liste en ajoutant tous les éléments d’une autre liste.\nliste.extend([6, 7])\n\n\ninsert()\nInsère un élément à une position donnée.\nliste.insert(1, 'a')\n\n\nremove()\nSupprime la première occurrence d’un élément.\nliste.remove('a')\n\n\npop()\nSupprime et renvoie un élément à une position donnée (par défaut, le dernier).\nliste.pop()\n\n\nclear()\nSupprime tous les éléments de la liste.\nliste.clear()\n\n\nindex()\nRetourne l’indice du premier élément correspondant.\nliste.index('a')\n\n\ncount()\nCompte le nombre d’occurrences d’un élément spécifique.\nliste.count(5)\n\n\nsort()\nTrie les éléments de la liste (dans un ordre spécifique).\nliste.sort()\n\n\nreverse()\nInverse l’ordre des éléments de la liste.\nliste.reverse()\n\n\ncopy()\nRetourne une copie superficielle de la liste.\nnouvelle_liste = liste.copy()\n\n\n\n# Création d'une liste de base\nma_liste = [1, 2, 3]\n\n# Utilisation de append()\nma_liste.append(4)\nprint(\"Après append(4):\", ma_liste)\n\n# Utilisation de extend()\nma_liste.extend([5, 6])\nprint(\"Après extend([5, 6]):\", ma_liste)\n\n# Utilisation de insert()\nma_liste.insert(1, 'a')\nprint(\"Après insert(1, 'a'):\", ma_liste)\n\n# Utilisation de remove()\nma_liste.remove('a')\nprint(\"Après remove('a'):\", ma_liste)\n\n# Utilisation de pop()\nelement_supprime = ma_liste.pop()\nprint(\"Après pop():\", ma_liste, \", Élément supprimé:\", element_supprime)\n\n# Utilisation de clear()\nma_liste.clear()\nprint(\"Après clear():\", ma_liste)\n\n# Recréation de la liste pour les autres méthodes\nma_liste = [3, 1, 4, 2, 2]\n\n# Utilisation de index()\nindex_de_4 = ma_liste.index(4)\nprint(\"Index de 4:\", index_de_4)\n\n# Utilisation de count()\ncompte_de_2 = ma_liste.count(2)\nprint(\"Nombre d'occurrences de 2:\", compte_de_2)\n\n# Utilisation de sort()\nma_liste.sort()\nprint(\"Après sort():\", ma_liste)\n\n# Utilisation de reverse()\nma_liste.reverse()\nprint(\"Après reverse():\", ma_liste)\n\n# Utilisation de copy()\ncopie_de_ma_liste = ma_liste.copy()\nprint(\"Copie de la liste:\", copie_de_ma_liste)\n\n\nParcours de Liste\nLe parcours de liste permet d’accéder à chaque élément d’une liste de manière séquentielle. Cela peut être fait de différentes manières, mais les boucles “for” et “while” sont les plus courantes.\n1. La boucle \"for\" est la méthode la plus fréquemment utilisée pour parcourir une liste. Elle permet de traiter chaque composant de manière indépendante.\n2. La compréhension des listes est une méthode simple pour créer des listes. Elle permet de transformer une liste en une autre liste en filtrant les éléments pour former une liste des résultats d'une expression donnée.\nLa syntaxe fondamentale pour la compréhension de liste est :\n[nouvelle_expression for item in iterable if condition]\nL’expression “nouvelle_expression” définit comment organiser les éléments de l’iterable (comme une liste). La variable qui prend la valeur de chaque élément de l’iterable à chaque itération est appelée “item”. Une condition optionnelle pour filtrer les éléments de l’iterable est la “condition”.\n# récupérer tous les légumes avec un \"a\"\nlegumes = [\"carotte\", \"poivron\", \"haricot\"]\nnewlist = []\n\nfor l in legumes:\n  if \"a\" in l:\n    newlist.append(l)\n\nprint(newlist)\nnewlist = []\nnewlist = [l for l in legumes if \"l\" in l ]\nprint(newlist)\n# Créer une liste des carrés des nombres de 0 à 9 :\ncarres = [x**2 for x in range(10)]\n# Filtrer les nombres pairs dans une liste :\nnombres_pairs = [x for x in range(10) if x % 2 == 0]\n# Appliquer une fonction à tous les éléments :\nnoms_majuscules = [nom.upper() for nom in [\"alice\", \"bob\", \"charlie\"]]"
  },
  {
    "objectID": "cours.html#tuples-tuple",
    "href": "cours.html#tuples-tuple",
    "title": "Les fondamentaux de Python",
    "section": "5.3 Tuples (tuple) :",
    "text": "5.3 Tuples (tuple) :\n\nSimilaires aux listes, mais immuables (non modifiables après création).\nLes éléments sont séparés par des virgules et entourés de parenthèses.\nExemple : (1, \"a\", 3.14).\n\n\n\n\n\n\n\n\nAvantage\nDescription\n\n\n\n\nSécurité des Données\nParfait pour protéger les données contre les modifications.\n\n\nPerformance\nPlus rapides à parcourir que les listes.\n\n\nUtilisation en tant que Clés de Dictionnaire\nPeuvent être utilisés comme clés dans les dictionnaires, contrairement aux listes.\n\n\nRetour de Plusieurs Valeurs de Fonction\nUtilisés pour retourner plusieurs valeurs depuis une fonction.\n\n\nStockage de Données Constantes\nIdéaux pour stocker des données qui ne doivent pas être modifiées.\n\n\n\n# Définition d'un tuple\nmon_tuple = (1, \"a\", 3.14)\n\nun_autre_tuple = 2, \"b\", 4.28\n\n# Accès aux Éléments\npremier_element = mon_tuple[0]  # 1\n\n# Tuple à Un Élément\ntuple_singleton = (5,)\n\n# Imbrication\ntuple_imbrique = (1, (2, 3), (4, 5))\n\n# Méthodes Utiles\nlongueur = len(mon_tuple)  # Retourne la longueur de mon_tuple, ici 3\ncompteur = mon_tuple.count(1)  # Compte le nombre de fois que 1 apparaît dans mon_tuple, ici 1\nindice = mon_tuple.index(\"a\")  # Trouve l'indice de \"a\" dans mon_tuple, ici 1"
  },
  {
    "objectID": "cours.html#ensembles-set",
    "href": "cours.html#ensembles-set",
    "title": "Les fondamentaux de Python",
    "section": "5.4 Ensembles (set) :",
    "text": "5.4 Ensembles (set) :\n\nEnsembles non structurés de valeurs uniques.\n\nBénéfiques pour l’analyse globale et la recherche de valeurs spécifiques.\nIls peuvent être modifiés, mais chaque élément doit être unique.\nNon-ordonnés : L’ordre des éléments n’est pas respecté dans les ensembles. Il n’est donc pas possible d’accéder aux éléments en utilisant un index.\nIllustration : {1, 2, 3}.\n\n\nOpérations d’Ensemble\n\n\n\n\n\n\n\n\nOpération\nSyntaxe\nDescription\n\n\n\n\nUnion\na \\| b\nRetourne un nouvel ensemble contenant tous les éléments uniques des ensembles a et b.\n\n\nIntersection\na & b\nRetourne un nouvel ensemble contenant uniquement les éléments communs aux ensembles a et b.\n\n\nDifférence\na - b\nRetourne un nouvel ensemble contenant les éléments de a qui ne sont pas dans b.\n\n\nDifférence Symétrique\na ^ b\nRetourne un nouvel ensemble contenant tous les éléments qui sont dans a ou b, mais pas dans les deux.\n\n\nAjout\na.add(x)\nAjoute l’élément x à l’ensemble a.\n\n\nSuppression\na.remove(x)\nSupprime l’élément x de l’ensemble a ; lève une erreur si x n’est pas présent.\n\n\nSuppression (sans erreur)\na.discard(x)\nSupprime l’élément x de l’ensemble a si x est présent ; ne fait rien sinon.\n\n\n\n# Définition des ensembles\nensemble_a = {1, 2, 3, 4}\nensemble_b = {3, 4, 5, 6}\n\n# Opérations d'ensemble\nunion = ensemble_a | ensemble_b\nintersection = ensemble_a & ensemble_b\ndifference = ensemble_a - ensemble_b\ndifference_symetrique = ensemble_a ^ ensemble_b\n\n# Affichage des résultats\nprint(\"Union :\", union)\nprint(\"Intersection :\", intersection)\nprint(\"Différence :\", difference)\nprint(\"Différence Symétrique :\", difference_symetrique)\n\n# Ajout et suppression\nensemble_a.add(7)\nprint(\"Après ajout :\", ensemble_a)\nensemble_a.remove(1)\nprint(\"Après suppression :\", ensemble_a)\nensemble_a.discard(8)  # Ne fait rien car 8 n'est pas dans l'ensemble"
  },
  {
    "objectID": "cours.html#dictionnaires-dict",
    "href": "cours.html#dictionnaires-dict",
    "title": "Les fondamentaux de Python",
    "section": "5.5 Dictionnaires (dict) :",
    "text": "5.5 Dictionnaires (dict) :\n\nFondés sur des paires essentielles.\nLes valeurs peuvent être consultées grâce aux clés.\nTransférables, offrant la possibilité de mettre à jour et de supprimer.\nExemple : {\"nom\": \"Maroua\", \"âge\": 30}.\nGestion d’informations organisées : Idéal pour conserver des données complexes telles que des données utilisateur.\nRecherche rapide : Optez pour des dictionnaires afin de réaliser des recherches rapides en utilisant des clés spécifiques.\n\n# Définition d'un dictionnaire\npersonne = {\"nom\": \"Maroua\", \"age\": 30}\nautre_dict = dict(nom=\"Mouloud\", age=25)\n\n# Ajout et Mise à Jour\npersonne[\"profession\"] = \"Referente pedagogique\"\n# Utilisation de keys()\ncles = personne.keys()\nprint(\"Clés:\", cles)\n\n# Utilisation de values()\nvaleurs = personne.values()\nprint(\"Valeurs:\", valeurs)\n\n# Utilisation de items()\npaires = personne.items()\nprint(\"Paires clé-valeur:\", paires)\n\n# Utilisation de get()\nnom = personne.get(\"nom\")  # Retourne 'Maroua'\nville = personne.get(\"ville\", \"Non spécifiée\")  # Retourne 'Non spécifiée' car 'ville' n'existe pas\nprint(\"Nom:\", nom)\nprint(\"Ville:\", ville)\n\n# Parcours des clés\nprint(\"\\nParcours des clés:\")\nfor cle in personne:\n    print(cle)\n\n# Parcours des valeurs\nprint(\"\\nParcours des valeurs:\")\nfor valeur in personne.values():\n    print(valeur)\n\n# Parcours des paires clé-valeur\nprint(\"\\nParcours des paires clé-valeur:\")\nfor cle, valeur in personne.items():\n    print(cle, \":\", valeur)\n\nprint(\"\\nParcours des paires clé-valeur avec enumerate:\")\nfor index, (cle, valeur) in enumerate(personne.items()):\n    print(f\"Index {index}: Clé = {cle}, Valeur = {valeur}\")\n# Suppression\ndel personne[\"age\"]\nprofession = personne.pop(\"profession\")\npersonne"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A propos",
    "section": "",
    "text": "Je m’appelle Frederic Padre. Je forme des docteurs en analyse de données. N’hésitez pas à vous rendre sur le site de mon élève Ményssa CHERIFA-LURON pour des cours sur R. https://universdesdonnees.github.io/R-Introduction/cours/Cours.html#les-boucles"
  }
]